@page "/arcface"
@using Spectra.ImageProcessing.Processing
@rendermode InteractiveServer

<PageTitle>Arc Face</PageTitle>

<p>Select two image files from your computer.</p>

<InputFile OnChange="OnFile1Selected" accept="image/*" />
<br />
<InputFile OnChange="OnFile2Selected" accept="image/*" />
<hr />
<input type="button" @onclick="CheckSimilarity" value="Check Similiarity" />


@if (!string.IsNullOrEmpty(errorMessage))
{
	<div class="alert alert-danger">@errorMessage</div>
}
else if (arcFace is not null)
{
	<hr />
	<table class="table">
		<thead>
			<tr>
				<th>Similarity</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>@arcFace</td>
			</tr>
		</tbody>
	</table>
}

@code {
	private string? arcFace;
	private string? errorMessage;
	private MemoryStream image1MemoryStream, image2MemoryStream;

	private async Task OnFile1Selected(InputFileChangeEventArgs e)
	{
		var file = e.File;
		const long maxSize = 2L * 1024 * 1024;

		if (file == null)
		{
			errorMessage = "No file selected.";
			return;
		}

		if (file.Size > maxSize)
		{
			errorMessage = "File is too large. Max allowed size is 2 MB.";
			return;
		}

		errorMessage = null;

		await using var stream = file.OpenReadStream(maxAllowedSize: maxSize);

		image1MemoryStream = new MemoryStream();
		await stream.CopyToAsync(image1MemoryStream);
		image1MemoryStream.Position = 0;
	}

	private async Task OnFile2Selected(InputFileChangeEventArgs e)
	{
		var file = e.File;
		const long maxSize = 2L * 1024 * 1024;

		if (file == null)
		{
			errorMessage = "No file selected.";
			return;
		}

		if (file.Size > maxSize)
		{
			errorMessage = "File is too large. Max allowed size is 2 MB.";
			return;
		}

		errorMessage = null;

		await using var stream = file.OpenReadStream(maxAllowedSize: maxSize);

		image2MemoryStream = new MemoryStream();
		await stream.CopyToAsync(image2MemoryStream);
		image2MemoryStream.Position = 0;
	}

	private async Task CheckSimilarity()
	{

		var arcFaceService = new ArcFaceService();
		var result1 = await arcFaceService.GetEmbedding(image1MemoryStream);
		var result2 = await arcFaceService.GetEmbedding(image2MemoryStream);

		var sim = await ArcFaceService.CosineSimilarity(result1, result2);

		arcFace = sim.ToString();
	}
}